// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: connectrpc/conformance/v1/server_compat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Describes one configuration for an RPC server. The server is
/// expected to expose the connectrpc.conformance.v1.ConformanceService
/// RPC service. The configuration does not include a port. The
/// process should pick an available port, which is typically
/// done by using port zero (0) when creating a network listener
/// so that the OS selects an available ephemeral port.
///
/// These properties are read from stdin. Once the server is
/// listening, details about the server, in the form of a
/// ServerCompatResponse, are written to stdout.
///
/// Each test process is expected to start only one RPC server.
/// When testing multiple configurations, multiple test processes
/// will be started, each with different properties.
struct Connectrpc_Conformance_V1_ServerCompatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signals to the server that it must support at least this protocol. Note
  /// that it is fine to support others.
  /// For example if `PROTOCOL_CONNECT` is specified, the server _must_ support
  /// at least Connect, but _may_ also support gRPC or gRPC-web.
  var `protocol`: Connectrpc_Conformance_V1_Protocol = .unspecified

  /// Signals to the server the minimum HTTP version to support. As with
  /// `protocol`, it is fine to support other versions. For example, if
  /// `HTTP_VERSION_2` is specified, the server _must_ support HTTP/2, but _may_ also
  /// support HTTP/1.1 or HTTP/3.
  var httpVersion: Connectrpc_Conformance_V1_HTTPVersion = .unspecified

  /// If true, generate a certificate that clients will be configured to trust
  /// when connecting and return it in the `pem_cert` field of the `ServerCompatResponse`.
  /// The certificate can be any TLS certificate where the subject matches the
  /// value sent back in the `host` field of the `ServerCompatResponse`.
  /// Self-signed certificates (and `localhost` as the subject) are allowed.
  /// If false, the server should not use TLS and instead use
  /// a plain-text/unencrypted socket.
  var useTls: Bool = false

  /// If non-empty, the clients will use certificates to authenticate
  /// themselves. This value is a PEM-encoded cert that should be
  /// trusted by the server. When non-empty, the server should require
  /// that clients provide certificates and they should validate that
  /// the certificate presented is valid.
  ///
  /// This will always be empty if use_tls is false.
  var clientTlsCert: Data = Data()

  /// If non-zero, indicates the maximum size in bytes for a message.
  /// If the client sends anything larger, the server should reject it.
  var messageReceiveLimit: UInt32 = 0

  /// If use_tls is true, this provides details for a self-signed TLS
  /// cert that the server may use.
  ///
  /// The provided certificate is only good for loopback communication:
  /// it uses "localhost" and "127.0.0.1" as the IP and DNS names in
  /// the certificate's subject. If the server needs a different subject
  /// or the client is in an environment where configuring trust of a
  /// self-signed certificate is difficult or infeasible.
  ///
  /// If the server implementation chooses to use these credentials,
  /// it must echo back the certificate in the ServerCompatResponse and
  /// should also leave the host field empty or explicitly set to
  /// "127.0.0.1".
  ///
  /// If it chooses to use a different certificate and key, it must send
  /// back the corresponding certificate in the ServerCompatResponse.
  var serverCreds: Connectrpc_Conformance_V1_TLSCreds {
    get {return _serverCreds ?? Connectrpc_Conformance_V1_TLSCreds()}
    set {_serverCreds = newValue}
  }
  /// Returns true if `serverCreds` has been explicitly set.
  var hasServerCreds: Bool {return self._serverCreds != nil}
  /// Clears the value of `serverCreds`. Subsequent reads from it will return its default value.
  mutating func clearServerCreds() {self._serverCreds = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _serverCreds: Connectrpc_Conformance_V1_TLSCreds? = nil
}

/// The outcome of one ServerCompatRequest.
struct Connectrpc_Conformance_V1_ServerCompatResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The host where the server is running. This should usually be `127.0.0.1`,
  /// unless your program actually starts a remote server to which the client
  /// should connect.
  var host: String = String()

  /// The port where the server is listening.
  var port: UInt32 = 0

  /// The TLS certificate, in PEM format, if `use_tls` was set
  /// to `true`. Clients will verify this certificate when connecting via TLS.
  /// If `use_tls` was set to `false`, this should always be empty.
  var pemCert: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Connectrpc_Conformance_V1_ServerCompatRequest: @unchecked Sendable {}
extension Connectrpc_Conformance_V1_ServerCompatResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "connectrpc.conformance.v1"

extension Connectrpc_Conformance_V1_ServerCompatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServerCompatRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protocol"),
    2: .standard(proto: "http_version"),
    4: .standard(proto: "use_tls"),
    5: .standard(proto: "client_tls_cert"),
    6: .standard(proto: "message_receive_limit"),
    7: .standard(proto: "server_creds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.`protocol`) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.httpVersion) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.useTls) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.clientTlsCert) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.messageReceiveLimit) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._serverCreds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.`protocol` != .unspecified {
      try visitor.visitSingularEnumField(value: self.`protocol`, fieldNumber: 1)
    }
    if self.httpVersion != .unspecified {
      try visitor.visitSingularEnumField(value: self.httpVersion, fieldNumber: 2)
    }
    if self.useTls != false {
      try visitor.visitSingularBoolField(value: self.useTls, fieldNumber: 4)
    }
    if !self.clientTlsCert.isEmpty {
      try visitor.visitSingularBytesField(value: self.clientTlsCert, fieldNumber: 5)
    }
    if self.messageReceiveLimit != 0 {
      try visitor.visitSingularUInt32Field(value: self.messageReceiveLimit, fieldNumber: 6)
    }
    try { if let v = self._serverCreds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Connectrpc_Conformance_V1_ServerCompatRequest, rhs: Connectrpc_Conformance_V1_ServerCompatRequest) -> Bool {
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.httpVersion != rhs.httpVersion {return false}
    if lhs.useTls != rhs.useTls {return false}
    if lhs.clientTlsCert != rhs.clientTlsCert {return false}
    if lhs.messageReceiveLimit != rhs.messageReceiveLimit {return false}
    if lhs._serverCreds != rhs._serverCreds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Connectrpc_Conformance_V1_ServerCompatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServerCompatResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "port"),
    3: .standard(proto: "pem_cert"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.host) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.port) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.pemCert) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 1)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 2)
    }
    if !self.pemCert.isEmpty {
      try visitor.visitSingularBytesField(value: self.pemCert, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Connectrpc_Conformance_V1_ServerCompatResponse, rhs: Connectrpc_Conformance_V1_ServerCompatResponse) -> Bool {
    if lhs.host != rhs.host {return false}
    if lhs.port != rhs.port {return false}
    if lhs.pemCert != rhs.pemCert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
